/**
 * Pokemon Team Builder
 * Advanced team building functionality with search, analysis, and management
 */

class TeamBuilder {
    constructor() {
        this.currentTeam = [null, null, null, null, null, null];
        this.allPokemon = [];
        this.filteredPokemon = [];
        this.currentModal = null;
        this.selectedSlot = null;
        
        // Type effectiveness chart for analysis
        this.typeChart = {
            normal: { weakTo: ['fighting'], resistantTo: [], immuneTo: ['ghost'] },
            fire: { weakTo: ['water', 'ground', 'rock'], resistantTo: ['fire', 'grass', 'ice', 'bug', 'steel', 'fairy'], immuneTo: [] },
            water: { weakTo: ['electric', 'grass'], resistantTo: ['fire', 'water', 'ice', 'steel'], immuneTo: [] },
            electric: { weakTo: ['ground'], resistantTo: ['electric', 'flying', 'steel'], immuneTo: [] },
            grass: { weakTo: ['fire', 'ice', 'poison', 'flying', 'bug'], resistantTo: ['water', 'electric', 'grass', 'ground'], immuneTo: [] },
            ice: { weakTo: ['fire', 'fighting', 'rock', 'steel'], resistantTo: ['ice'], immuneTo: [] },
            fighting: { weakTo: ['flying', 'psychic', 'fairy'], resistantTo: ['bug', 'rock', 'dark'], immuneTo: [] },
            poison: { weakTo: ['ground', 'psychic'], resistantTo: ['grass', 'fighting', 'poison', 'bug', 'fairy'], immuneTo: [] },
            ground: { weakTo: ['water', 'grass', 'ice'], resistantTo: ['poison', 'rock'], immuneTo: ['electric'] },
            flying: { weakTo: ['electric', 'ice', 'rock'], resistantTo: ['grass', 'fighting', 'bug'], immuneTo: ['ground'] },
            psychic: { weakTo: ['bug', 'ghost', 'dark'], resistantTo: ['fighting', 'psychic'], immuneTo: [] },
            bug: { weakTo: ['fire', 'flying', 'rock'], resistantTo: ['grass', 'fighting', 'ground'], immuneTo: [] },
            rock: { weakTo: ['water', 'grass', 'fighting', 'ground', 'steel'], resistantTo: ['normal', 'fire', 'poison', 'flying'], immuneTo: [] },
            ghost: { weakTo: ['ghost', 'dark'], resistantTo: ['poison', 'bug'], immuneTo: ['normal', 'fighting'] },
            dragon: { weakTo: ['ice', 'dragon', 'fairy'], resistantTo: ['fire', 'water', 'electric', 'grass'], immuneTo: [] },
            dark: { weakTo: ['fighting', 'bug', 'fairy'], resistantTo: ['ghost', 'dark'], immuneTo: ['psychic'] },
            steel: { weakTo: ['fire', 'fighting', 'ground'], resistantTo: ['normal', 'grass', 'ice', 'flying', 'psychic', 'bug', 'rock', 'dragon', 'steel', 'fairy'], immuneTo: ['poison'] },
            fairy: { weakTo: ['poison', 'steel'], resistantTo: ['fighting', 'bug', 'dark'], immuneTo: ['dragon'] }
        };
        
        this.init();\n    }\n\n    async init() {\n        await this.loadPokemonData();\n        this.setupEventListeners();\n        this.renderPokemonList();\n        this.updateTeamDisplay();\n        this.updateAnalysis();\n    }\n\n    async loadPokemonData() {\n        try {\n            // Load from the existing random.js data structure\n            if (typeof data !== 'undefined' && data.pokemon) {\n                this.allPokemon = Object.values(data.pokemon).map(pokemon => ({\n                    id: pokemon.id || pokemon.num,\n                    name: pokemon.name,\n                    types: pokemon.types || [],\n                    baseStats: pokemon.baseStats || {\n                        hp: 50, atk: 50, def: 50, spa: 50, spd: 50, spe: 50\n                    },\n                    sprite: `./sprites/normal/${pokemon.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}.webp`,\n                    regions: pokemon.regions || [],\n                    evolutionStage: pokemon.evolutionStage || 0,\n                    isLegendary: pokemon.isLegendary || false,\n                    isMythical: pokemon.isMythical || false\n                }));\n            } else {\n                // Fallback: create sample data\n                this.allPokemon = this.createSamplePokemon();\n            }\n            \n            this.filteredPokemon = [...this.allPokemon];\n            console.log(`Loaded ${this.allPokemon.length} Pokémon`);\n        } catch (error) {\n            console.error('Error loading Pokemon data:', error);\n            this.allPokemon = this.createSamplePokemon();\n            this.filteredPokemon = [...this.allPokemon];\n        }\n    }\n\n    createSamplePokemon() {\n        // Sample data for testing\n        return [\n            { id: 1, name: 'Bulbasaur', types: ['grass', 'poison'], baseStats: {hp: 45, atk: 49, def: 49, spa: 65, spd: 65, spe: 45}, sprite: './sprites/normal/bulbasaur.webp' },\n            { id: 4, name: 'Charmander', types: ['fire'], baseStats: {hp: 39, atk: 52, def: 43, spa: 60, spd: 50, spe: 65}, sprite: './sprites/normal/charmander.webp' },\n            { id: 7, name: 'Squirtle', types: ['water'], baseStats: {hp: 44, atk: 48, def: 65, spa: 50, spd: 64, spe: 43}, sprite: './sprites/normal/squirtle.webp' },\n            { id: 25, name: 'Pikachu', types: ['electric'], baseStats: {hp: 35, atk: 55, def: 40, spa: 50, spd: 50, spe: 90}, sprite: './sprites/normal/pikachu.webp' },\n            { id: 150, name: 'Mewtwo', types: ['psychic'], baseStats: {hp: 106, atk: 110, def: 90, spa: 154, spd: 90, spe: 130}, sprite: './sprites/normal/mewtwo.webp' },\n            { id: 448, name: 'Lucario', types: ['fighting', 'steel'], baseStats: {hp: 70, atk: 110, def: 70, spa: 115, spd: 70, spe: 90}, sprite: './sprites/normal/lucario.webp' }\n        ];\n    }\n\n    setupEventListeners() {\n        // Search and filters\n        document.getElementById('pokemonSearch').addEventListener('input', (e) => {\n            this.filterPokemon();\n        });\n        \n        document.getElementById('typeFilter').addEventListener('change', (e) => {\n            this.filterPokemon();\n        });\n        \n        document.getElementById('regionFilter').addEventListener('change', (e) => {\n            this.filterPokemon();\n        });\n\n        // Team management buttons\n        document.getElementById('clearTeam').addEventListener('click', () => {\n            this.clearTeam();\n        });\n        \n        document.getElementById('randomFill').addEventListener('click', () => {\n            this.fillRandomTeam();\n        });\n        \n        document.getElementById('saveTeam').addEventListener('click', () => {\n            this.saveTeam();\n        });\n        \n        document.getElementById('loadTeam').addEventListener('click', () => {\n            this.loadTeam();\n        });\n\n        // Analysis tabs\n        document.querySelectorAll('.analysis-tab').forEach(tab => {\n            tab.addEventListener('click', (e) => {\n                this.switchAnalysisTab(e.target.dataset.tab);\n            });\n        });\n        \n        // Team slots click handlers\n        document.querySelectorAll('.team-slot').forEach((slot, index) => {\n            slot.addEventListener('click', () => {\n                this.openSlotSelector(index);\n            });\n        });\n    }\n\n    filterPokemon() {\n        const searchTerm = document.getElementById('pokemonSearch').value.toLowerCase();\n        const typeFilter = document.getElementById('typeFilter').value;\n        const regionFilter = document.getElementById('regionFilter').value;\n        \n        this.filteredPokemon = this.allPokemon.filter(pokemon => {\n            // Search by name or ID\n            const matchesSearch = pokemon.name.toLowerCase().includes(searchTerm) || \n                                pokemon.id.toString().includes(searchTerm);\n            \n            // Filter by type\n            const matchesType = !typeFilter || pokemon.types.includes(typeFilter);\n            \n            // Filter by region\n            const matchesRegion = !regionFilter || \n                                (pokemon.regions && pokemon.regions.includes(regionFilter));\n            \n            return matchesSearch && matchesType && matchesRegion;\n        });\n        \n        this.renderPokemonList();\n    }\n\n    renderPokemonList() {\n        const container = document.getElementById('pokemonList');\n        container.innerHTML = '';\n        \n        if (this.filteredPokemon.length === 0) {\n            container.innerHTML = '<p class=\"no-results\">No Pokémon found matching your criteria.</p>';\n            return;\n        }\n        \n        this.filteredPokemon.slice(0, 50).forEach(pokemon => { // Limit to 50 for performance\n            const card = this.createPokemonCard(pokemon);\n            container.appendChild(card);\n        });\n        \n        if (this.filteredPokemon.length > 50) {\n            const moreText = document.createElement('p');\n            moreText.className = 'more-results';\n            moreText.textContent = `Showing first 50 of ${this.filteredPokemon.length} results. Refine your search to see more.`;\n            container.appendChild(moreText);\n        }\n    }\n\n    createPokemonCard(pokemon) {\n        const card = document.createElement('div');\n        card.className = 'pokemon-card';\n        card.onclick = () => this.showPokemonModal(pokemon);\n        \n        card.innerHTML = `\n            <div class=\"pokemon-card__image\">\n                <img src=\"${pokemon.sprite}\" alt=\"${pokemon.name}\" onerror=\"this.src='./sprites/normal/placeholder.png'\">\n                <span class=\"pokemon-card__number\">#${pokemon.id}</span>\n            </div>\n            <div class=\"pokemon-card__info\">\n                <h4 class=\"pokemon-card__name\">${pokemon.name}</h4>\n                <div class=\"pokemon-card__types\">\n                    ${pokemon.types.map(type => `<span class=\"type-badge type-${type}\">${type}</span>`).join('')}\n                </div>\n            </div>\n        `;\n        \n        return card;\n    }\n\n    showPokemonModal(pokemon) {\n        this.currentModal = pokemon;\n        \n        document.getElementById('modalPokemonName').textContent = pokemon.name;\n        document.getElementById('modalPokemonSprite').src = pokemon.sprite;\n        document.getElementById('modalShinyToggle').checked = false;\n        \n        // Render stats\n        const statsContainer = document.getElementById('modalPokemonStats');\n        statsContainer.innerHTML = Object.entries(pokemon.baseStats || {}).map(([stat, value]) => \n            `<div class=\"stat-row\">\n                <span class=\"stat-name\">${this.getStatName(stat)}</span>\n                <span class=\"stat-value\">${value}</span>\n                <div class=\"stat-bar\"><div class=\"stat-fill\" style=\"width: ${(value / 255) * 100}%\"></div></div>\n            </div>`\n        ).join('');\n        \n        // Render types\n        const typesContainer = document.getElementById('modalPokemonTypes');\n        typesContainer.innerHTML = pokemon.types.map(type => \n            `<span class=\"type-badge type-${type}\">${type}</span>`\n        ).join('');\n        \n        document.getElementById('pokemonModal').style.display = 'flex';\n    }\n\n    getStatName(stat) {\n        const names = {\n            hp: 'HP',\n            atk: 'Attack',\n            def: 'Defense', \n            spa: 'Sp. Attack',\n            spd: 'Sp. Defense',\n            spe: 'Speed'\n        };\n        return names[stat] || stat;\n    }\n\n    addToTeam() {\n        if (!this.currentModal) return;\n        \n        // Find first empty slot\n        const emptySlot = this.currentTeam.findIndex(slot => slot === null);\n        \n        if (emptySlot === -1) {\n            alert('Your team is full! Remove a Pokémon first.');\n            return;\n        }\n        \n        const isShiny = document.getElementById('modalShinyToggle').checked;\n        \n        this.currentTeam[emptySlot] = {\n            ...this.currentModal,\n            isShiny: isShiny,\n            slot: emptySlot\n        };\n        \n        this.updateTeamDisplay();\n        this.updateAnalysis();\n        this.closePokemonModal();\n    }\n\n    updateTeamDisplay() {\n        const slots = document.querySelectorAll('.team-slot');\n        \n        slots.forEach((slot, index) => {\n            const pokemon = this.currentTeam[index];\n            const content = slot.querySelector('.team-slot__content');\n            \n            if (pokemon) {\n                content.innerHTML = `\n                    <div class=\"team-pokemon\" ${pokemon.isShiny ? 'data-shiny=\"true\"' : ''}>\n                        <button class=\"remove-pokemon\" onclick=\"teamBuilder.removePokemon(${index})\">&times;</button>\n                        <img src=\"${pokemon.sprite}\" alt=\"${pokemon.name}\" class=\"team-pokemon__sprite\">\n                        <h4 class=\"team-pokemon__name\">${pokemon.name}</h4>\n                        <div class=\"team-pokemon__types\">\n                            ${pokemon.types.map(type => `<span class=\"type-badge type-${type}\">${type}</span>`).join('')}\n                        </div>\n                        ${pokemon.isShiny ? '<div class=\"shiny-indicator\">✨</div>' : ''}\n                    </div>\n                `;\n            } else {\n                content.innerHTML = `\n                    <div class=\"empty-slot\">\n                        <span class=\"slot-number\">${index + 1}</span>\n                        <p>Click to add</p>\n                    </div>\n                `;\n            }\n        });\n        \n        // Update team count\n        const filledSlots = this.currentTeam.filter(slot => slot !== null).length;\n        document.getElementById('teamCount').textContent = filledSlots;\n    }\n\n    removePokemon(slotIndex) {\n        this.currentTeam[slotIndex] = null;\n        this.updateTeamDisplay();\n        this.updateAnalysis();\n    }\n\n    clearTeam() {\n        if (this.currentTeam.some(slot => slot !== null)) {\n            if (confirm('Are you sure you want to clear your entire team?')) {\n                this.currentTeam = [null, null, null, null, null, null];\n                this.updateTeamDisplay();\n                this.updateAnalysis();\n            }\n        }\n    }\n\n    fillRandomTeam() {\n        const emptySlots = this.currentTeam.map((slot, index) => slot === null ? index : null).filter(index => index !== null);\n        \n        emptySlots.forEach(slotIndex => {\n            const randomPokemon = this.allPokemon[Math.floor(Math.random() * this.allPokemon.length)];\n            this.currentTeam[slotIndex] = {\n                ...randomPokemon,\n                isShiny: Math.random() < 0.1, // 10% chance for shiny\n                slot: slotIndex\n            };\n        });\n        \n        this.updateTeamDisplay();\n        this.updateAnalysis();\n    }\n\n    updateAnalysis() {\n        this.updateTypeAnalysis();\n        this.updateStatsAnalysis();\n        this.updateWeaknessAnalysis();\n    }\n\n    updateTypeAnalysis() {\n        const team = this.currentTeam.filter(p => p !== null);\n        \n        // Offensive types\n        const offensiveTypes = new Set();\n        const defensiveTypes = new Set();\n        \n        team.forEach(pokemon => {\n            pokemon.types.forEach(type => {\n                offensiveTypes.add(type);\n                defensiveTypes.add(type);\n            });\n        });\n        \n        // Render offensive types\n        const offensiveContainer = document.getElementById('offensiveTypes');\n        offensiveContainer.innerHTML = '';\n        \n        Object.keys(this.typeChart).forEach(type => {\n            const badge = document.createElement('span');\n            badge.className = `type-badge type-${type} ${offensiveTypes.has(type) ? 'covered' : 'not-covered'}`;\n            badge.textContent = type;\n            offensiveContainer.appendChild(badge);\n        });\n        \n        // Render defensive types\n        const defensiveContainer = document.getElementById('defensiveTypes');\n        defensiveContainer.innerHTML = '';\n        \n        Object.keys(this.typeChart).forEach(type => {\n            const badge = document.createElement('span');\n            badge.className = `type-badge type-${type} ${defensiveTypes.has(type) ? 'covered' : 'not-covered'}`;\n            badge.textContent = type;\n            defensiveContainer.appendChild(badge);\n        });\n    }\n\n    updateStatsAnalysis() {\n        const team = this.currentTeam.filter(p => p !== null);\n        \n        if (team.length === 0) {\n            document.getElementById('statsChart').innerHTML = '<p>Add Pokémon to see stats analysis</p>';\n            return;\n        }\n        \n        // Calculate average stats\n        const avgStats = {\n            hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0\n        };\n        \n        team.forEach(pokemon => {\n            Object.keys(avgStats).forEach(stat => {\n                avgStats[stat] += pokemon.baseStats[stat] || 0;\n            });\n        });\n        \n        Object.keys(avgStats).forEach(stat => {\n            avgStats[stat] = Math.round(avgStats[stat] / team.length);\n        });\n        \n        // Render stats chart\n        const chartContainer = document.getElementById('statsChart');\n        chartContainer.innerHTML = Object.entries(avgStats).map(([stat, value]) => \n            `<div class=\"stat-bar-container\">\n                <span class=\"stat-label\">${this.getStatName(stat)}</span>\n                <div class=\"stat-bar\">\n                    <div class=\"stat-fill\" style=\"width: ${(value / 255) * 100}%\"></div>\n                </div>\n                <span class=\"stat-value\">${value}</span>\n            </div>`\n        ).join('');\n    }\n\n    updateWeaknessAnalysis() {\n        const team = this.currentTeam.filter(p => p !== null);\n        \n        if (team.length === 0) {\n            document.getElementById('weaknessChart').innerHTML = '<p>Add Pokémon to see weakness analysis</p>';\n            return;\n        }\n        \n        // Calculate team weaknesses\n        const weaknessCount = {};\n        Object.keys(this.typeChart).forEach(type => {\n            weaknessCount[type] = 0;\n        });\n        \n        team.forEach(pokemon => {\n            // For each type attacking this Pokemon\n            Object.keys(this.typeChart).forEach(attackType => {\n                let effectiveness = 1;\n                \n                pokemon.types.forEach(defenseType => {\n                    if (this.typeChart[defenseType].weakTo.includes(attackType)) {\n                        effectiveness *= 2;\n                    } else if (this.typeChart[defenseType].resistantTo.includes(attackType)) {\n                        effectiveness *= 0.5;\n                    } else if (this.typeChart[defenseType].immuneTo.includes(attackType)) {\n                        effectiveness = 0;\n                    }\n                });\n                \n                if (effectiveness > 1) {\n                    weaknessCount[attackType]++;\n                }\n            });\n        });\n        \n        // Render weakness chart\n        const weaknessContainer = document.getElementById('weaknessChart');\n        weaknessContainer.innerHTML = Object.entries(weaknessCount)\n            .sort(([,a], [,b]) => b - a)\n            .map(([type, count]) => \n                `<div class=\"weakness-item ${count > team.length / 2 ? 'high-weakness' : count > 0 ? 'medium-weakness' : 'low-weakness'}\">\n                    <span class=\"type-badge type-${type}\">${type}</span>\n                    <span class=\"weakness-count\">${count}/${team.length}</span>\n                </div>`\n            ).join('');\n    }\n\n    switchAnalysisTab(tabName) {\n        // Update tab buttons\n        document.querySelectorAll('.analysis-tab').forEach(tab => {\n            tab.classList.remove('active');\n        });\n        document.querySelector(`[data-tab=\"${tabName}\"]`).classList.add('active');\n        \n        // Show corresponding panel\n        document.querySelectorAll('.analysis-panel').forEach(panel => {\n            panel.classList.remove('active');\n        });\n        document.getElementById(`${tabName}Analysis`).classList.add('active');\n    }\n\n    saveTeam() {\n        const teamData = {\n            name: prompt('Enter a name for your team:') || 'My Team',\n            pokemon: this.currentTeam,\n            savedAt: new Date().toISOString()\n        };\n        \n        if (teamData.name) {\n            const savedTeams = JSON.parse(localStorage.getItem('pokemonTeams') || '[]');\n            savedTeams.push(teamData);\n            localStorage.setItem('pokemonTeams', JSON.stringify(savedTeams));\n            alert('Team saved successfully!');\n        }\n    }\n\n    loadTeam() {\n        const savedTeams = JSON.parse(localStorage.getItem('pokemonTeams') || '[]');\n        \n        if (savedTeams.length === 0) {\n            alert('No saved teams found.');\n            return;\n        }\n        \n        const teamNames = savedTeams.map((team, index) => `${index + 1}. ${team.name} (${new Date(team.savedAt).toLocaleDateString()})`);\n        const selectedIndex = prompt('Select a team to load:\\n' + teamNames.join('\\n') + '\\n\\nEnter the number:');\n        \n        if (selectedIndex && !isNaN(selectedIndex)) {\n            const index = parseInt(selectedIndex) - 1;\n            if (index >= 0 && index < savedTeams.length) {\n                this.currentTeam = savedTeams[index].pokemon;\n                this.updateTeamDisplay();\n                this.updateAnalysis();\n                alert('Team loaded successfully!');\n            }\n        }\n    }\n\n    openSlotSelector(slotIndex) {\n        // For now, just show a simple message\n        // In the future, this could open a dedicated slot selector\n        console.log(`Clicked slot ${slotIndex}`);\n    }\n}\n\n// Global functions for HTML event handlers\nfunction closePokemonModal() {\n    document.getElementById('pokemonModal').style.display = 'none';\n    teamBuilder.currentModal = null;\n}\n\nfunction addToTeam() {\n    teamBuilder.addToTeam();\n}\n\n// Initialize the team builder\nlet teamBuilder;\n\n// Wait for DOM and data to load\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        setTimeout(() => {\n            teamBuilder = new TeamBuilder();\n        }, 100);\n    });\n} else {\n    setTimeout(() => {\n        teamBuilder = new TeamBuilder();\n    }, 100);\n}"